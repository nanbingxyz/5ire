"""
–î–µ–º–æ: –ê–Ω–∞–ª–∏–∑ —É—á–∞—Å—Ç–∫–∞ —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º –≥–æ—Ç–æ–≤–æ–≥–æ —Å–Ω–∏–º–∫–∞
–†–∞–±–æ—Ç–∞–µ—Ç –±–µ–∑ –¥–æ—Å—Ç—É–ø–∞ –∫ Rosreestr –∏ Yandex Maps API
"""

import os
import json
from dotenv import load_dotenv
from loguru import logger
from PIL import Image, ImageDraw, ImageFont
from io import BytesIO

from claude_vision_client import ClaudeVisionClient
from config import config

# –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
load_dotenv()


def create_demo_satellite_image(occupied: bool = False) -> bytes:
    """
    –°–æ–∑–¥–∞—Ç—å –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–æ–Ω–Ω–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ —É—á–∞—Å—Ç–∫–∞

    Args:
        occupied: True - —Å –∑–∞—Å—Ç—Ä–æ–π–∫–æ–π, False - —Å–≤–æ–±–æ–¥–Ω—ã–π

    Returns:
        –ë–∞–π—Ç—ã PNG –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
    """
    # –°–æ–∑–¥–∞–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ 800x600
    img = Image.new('RGB', (800, 600), color='#228B22')  # –ó–µ–ª–µ–Ω—ã–π —Ñ–æ–Ω (—Ç—Ä–∞–≤–∞)
    draw = ImageDraw.Draw(img)

    if occupied:
        # –†–∏—Å—É–µ–º –∑–¥–∞–Ω–∏—è
        # –ó–¥–∞–Ω–∏–µ 1
        draw.rectangle([100, 150, 250, 350], fill='#8B4513', outline='#654321', width=2)
        draw.rectangle([110, 160, 140, 190], fill='#87CEEB')  # –û–∫–Ω–æ
        draw.rectangle([180, 160, 210, 190], fill='#87CEEB')  # –û–∫–Ω–æ
        draw.rectangle([110, 220, 140, 250], fill='#87CEEB')  # –û–∫–Ω–æ
        draw.rectangle([180, 220, 210, 250], fill='#87CEEB')  # –û–∫–Ω–æ

        # –ó–¥–∞–Ω–∏–µ 2
        draw.rectangle([500, 200, 700, 450], fill='#A0522D', outline='#8B4513', width=2)
        draw.rectangle([520, 220, 560, 260], fill='#B0E0E6')  # –û–∫–Ω–æ
        draw.rectangle([590, 220, 630, 260], fill='#B0E0E6')  # –û–∫–Ω–æ
        draw.rectangle([520, 290, 560, 330], fill='#B0E0E6')  # –û–∫–Ω–æ
        draw.rectangle([590, 290, 630, 330], fill='#B0E0E6')  # –û–∫–Ω–æ

        # –î–æ—Ä–æ–≥–∞
        draw.rectangle([0, 500, 800, 600], fill='#696969')
        draw.line([(0, 550), (800, 550)], fill='#FFFF00', width=3)  # –†–∞–∑–º–µ—Ç–∫–∞

        logger.info("Created demo image: occupied plot with buildings")
    else:
        # –°–≤–æ–±–æ–¥–Ω—ã–π —É—á–∞—Å—Ç–æ–∫ - —Ç–æ–ª—å–∫–æ –∑–µ–ª–µ–Ω—å –∏ –Ω–µ–º–Ω–æ–≥–æ –¥–µ—Ä–µ–≤—å–µ–≤
        for i in range(15):
            x = 50 + i * 50
            y = 100 + (i % 3) * 150
            # –†–∏—Å—É–µ–º –¥–µ—Ä–µ–≤—å—è (–∫—Ä—É–≥–∏)
            draw.ellipse([x-15, y-15, x+15, y+15], fill='#006400', outline='#004d00')
            draw.rectangle([x-5, y+15, x+5, y+35], fill='#654321')  # –°—Ç–≤–æ–ª

        # –ù–µ–±–æ–ª—å—à–∞—è —Ç—Ä–æ–ø–∏–Ω–∫–∞
        draw.rectangle([350, 0, 400, 600], fill='#8B7355', outline='#654321')

        logger.info("Created demo image: vacant plot with vegetation")

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –±–∞–π—Ç—ã
    buffer = BytesIO()
    img.save(buffer, format='PNG')
    return buffer.getvalue()


def demo_analyze_vacant_plot():
    """–î–µ–º–æ: –∞–Ω–∞–ª–∏–∑ —Å–≤–æ–±–æ–¥–Ω–æ–≥–æ —É—á–∞—Å—Ç–∫–∞"""

    print("\n" + "="*70)
    print("–î–ï–ú–û 1: –ê–Ω–∞–ª–∏–∑ —Å–≤–æ–±–æ–¥–Ω–æ–≥–æ —É—á–∞—Å—Ç–∫–∞")
    print("="*70 + "\n")

    # –°–æ–∑–¥–∞–µ–º –∫–ª–∏–µ–Ω—Ç Claude
    client = ClaudeVisionClient(api_key=config.ANTHROPIC_API_KEY)

    # –°–æ–∑–¥–∞–µ–º –¥–µ–º–æ-–∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Å–≤–æ–±–æ–¥–Ω–æ–≥–æ —É—á–∞—Å—Ç–∫–∞
    print("–°–æ–∑–¥–∞–Ω–∏–µ –¥–µ–º–æ-–∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è —Å–≤–æ–±–æ–¥–Ω–æ–≥–æ —É—á–∞—Å—Ç–∫–∞...")
    image_data = create_demo_satellite_image(occupied=False)

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞
    os.makedirs("output/demo", exist_ok=True)
    with open("output/demo/vacant_plot.png", "wb") as f:
        f.write(image_data)
    print(f"‚úì –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ: output/demo/vacant_plot.png")

    # –î–∞–Ω–Ω—ã–µ –æ–± —É—á–∞—Å—Ç–∫–µ
    plot_details = {
        'cadastral_number': 'DEMO:78:12:0000001:01',
        'area': 5000,
        'area_unit': '–º¬≤',
        'category': '–ó–µ–º–ª–∏ –Ω–∞—Å–µ–ª–µ–Ω–Ω—ã—Ö –ø—É–Ω–∫—Ç–æ–≤',
        'permitted_use': '–î–ª—è –º–Ω–æ–≥–æ—ç—Ç–∞–∂–Ω–æ–≥–æ –∂–∏–ª–∏—â–Ω–æ–≥–æ —Å—Ç—Ä–æ–∏—Ç–µ–ª—å—Å—Ç–≤–∞',
        'address': '–°–∞–Ω–∫—Ç-–ü–µ—Ç–µ—Ä–±—É—Ä–≥, –ü—Ä–∏–º–æ—Ä—Å–∫–∏–π —Ä–∞–π–æ–Ω (–î–ï–ú–û)'
    }

    # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º
    print("\n–ê–Ω–∞–ª–∏–∑ —É—á–∞—Å—Ç–∫–∞ —á–µ—Ä–µ–∑ Claude Vision API...")
    print("(–ü–æ–¥–æ–∂–¥–∏—Ç–µ –Ω–µ—Å–∫–æ–ª—å–∫–æ —Å–µ–∫—É–Ω–¥)")

    result = client.analyze_plot_occupancy(
        image_data=image_data,
        plot_details=plot_details
    )

    # –í—ã–≤–æ–¥–∏–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
    print("\n" + "="*70)
    print("–†–ï–ó–£–õ–¨–¢–ê–¢–´ –ê–ù–ê–õ–ò–ó–ê")
    print("="*70)

    print(f"\nüìç –ö–∞–¥–∞—Å—Ç—Ä–æ–≤—ã–π –Ω–æ–º–µ—Ä: {plot_details['cadastral_number']}")
    print(f"üìê –ü–ª–æ—â–∞–¥—å: {plot_details['area']} {plot_details['area_unit']}")
    print(f"üìã –ö–∞—Ç–µ–≥–æ—Ä–∏—è: {plot_details['category']}")
    print(f"üèóÔ∏è  –†–∞–∑—Ä–µ—à–µ–Ω–Ω–æ–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: {plot_details['permitted_use']}")

    print(f"\nüîç –ê–Ω–∞–ª–∏–∑ –∑–∞—Å—Ç—Ä–æ–π–∫–∏:")
    print(f"   –ó–∞—Å—Ç—Ä–æ–µ–Ω: {'‚ùå –ù–ï–¢' if not result.get('is_occupied') else '‚úÖ –î–ê'}")
    print(f"   –£–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å: {result.get('confidence', 'N/A')}")
    print(f"   –û–±–Ω–∞—Ä—É–∂–µ–Ω—ã –∑–¥–∞–Ω–∏—è: {'‚ùå –ù–ï–¢' if not result.get('buildings_detected') else '‚úÖ –î–ê'}")
    print(f"   –ü—Ä–∏–≥–æ–¥–µ–Ω –¥–ª—è –∑–∞—Å—Ç—Ä–æ–π–∫–∏: {'‚úÖ –î–ê' if result.get('suitable_for_development') else '‚ùå –ù–ï–¢'}")

    print(f"\nüìù –û–ø–∏—Å–∞–Ω–∏–µ:")
    print(f"   {result.get('description', 'N/A')[:300]}...")

    print(f"\nüí° –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏:")
    print(f"   {result.get('recommendations', 'N/A')}")

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
    result_data = {
        'plot_details': plot_details,
        'analysis': result
    }

    with open("output/demo/vacant_plot_result.json", "w", encoding='utf-8') as f:
        json.dump(result_data, f, ensure_ascii=False, indent=2)

    print(f"\n‚úì –†–µ–∑—É–ª—å—Ç–∞—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω: output/demo/vacant_plot_result.json")

    return result


def demo_analyze_occupied_plot():
    """–î–µ–º–æ: –∞–Ω–∞–ª–∏–∑ –∑–∞—Å—Ç—Ä–æ–µ–Ω–Ω–æ–≥–æ —É—á–∞—Å—Ç–∫–∞"""

    print("\n" + "="*70)
    print("–î–ï–ú–û 2: –ê–Ω–∞–ª–∏–∑ –∑–∞—Å—Ç—Ä–æ–µ–Ω–Ω–æ–≥–æ —É—á–∞—Å—Ç–∫–∞")
    print("="*70 + "\n")

    # –°–æ–∑–¥–∞–µ–º –∫–ª–∏–µ–Ω—Ç Claude
    client = ClaudeVisionClient(api_key=config.ANTHROPIC_API_KEY)

    # –°–æ–∑–¥–∞–µ–º –¥–µ–º–æ-–∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∑–∞—Å—Ç—Ä–æ–µ–Ω–Ω–æ–≥–æ —É—á–∞—Å—Ç–∫–∞
    print("–°–æ–∑–¥–∞–Ω–∏–µ –¥–µ–º–æ-–∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –∑–∞—Å—Ç—Ä–æ–µ–Ω–Ω–æ–≥–æ —É—á–∞—Å—Ç–∫–∞...")
    image_data = create_demo_satellite_image(occupied=True)

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞
    os.makedirs("output/demo", exist_ok=True)
    with open("output/demo/occupied_plot.png", "wb") as f:
        f.write(image_data)
    print(f"‚úì –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ: output/demo/occupied_plot.png")

    # –î–∞–Ω–Ω—ã–µ –æ–± —É—á–∞—Å—Ç–∫–µ
    plot_details = {
        'cadastral_number': 'DEMO:78:12:0000002:01',
        'area': 3500,
        'area_unit': '–º¬≤',
        'category': '–ó–µ–º–ª–∏ –Ω–∞—Å–µ–ª–µ–Ω–Ω—ã—Ö –ø—É–Ω–∫—Ç–æ–≤',
        'permitted_use': '–ú–Ω–æ–≥–æ—ç—Ç–∞–∂–Ω–∞—è –∂–∏–ª–∞—è –∑–∞—Å—Ç—Ä–æ–π–∫–∞',
        'address': '–°–∞–Ω–∫—Ç-–ü–µ—Ç–µ—Ä–±—É—Ä–≥, –¶–µ–Ω—Ç—Ä–∞–ª—å–Ω—ã–π —Ä–∞–π–æ–Ω (–î–ï–ú–û)'
    }

    # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º
    print("\n–ê–Ω–∞–ª–∏–∑ —É—á–∞—Å—Ç–∫–∞ —á–µ—Ä–µ–∑ Claude Vision API...")
    print("(–ü–æ–¥–æ–∂–¥–∏—Ç–µ –Ω–µ—Å–∫–æ–ª—å–∫–æ —Å–µ–∫—É–Ω–¥)")

    result = client.analyze_plot_occupancy(
        image_data=image_data,
        plot_details=plot_details
    )

    # –í—ã–≤–æ–¥–∏–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
    print("\n" + "="*70)
    print("–†–ï–ó–£–õ–¨–¢–ê–¢–´ –ê–ù–ê–õ–ò–ó–ê")
    print("="*70)

    print(f"\nüìç –ö–∞–¥–∞—Å—Ç—Ä–æ–≤—ã–π –Ω–æ–º–µ—Ä: {plot_details['cadastral_number']}")
    print(f"üìê –ü–ª–æ—â–∞–¥—å: {plot_details['area']} {plot_details['area_unit']}")

    print(f"\nüîç –ê–Ω–∞–ª–∏–∑ –∑–∞—Å—Ç—Ä–æ–π–∫–∏:")
    print(f"   –ó–∞—Å—Ç—Ä–æ–µ–Ω: {'‚ùå –ù–ï–¢' if not result.get('is_occupied') else '‚úÖ –î–ê'}")
    print(f"   –£–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å: {result.get('confidence', 'N/A')}")
    print(f"   –û–±–Ω–∞—Ä—É–∂–µ–Ω—ã –∑–¥–∞–Ω–∏—è: {'‚ùå –ù–ï–¢' if not result.get('buildings_detected') else '‚úÖ –î–ê'}")
    print(f"   –ü—Ä–∏–≥–æ–¥–µ–Ω –¥–ª—è –∑–∞—Å—Ç—Ä–æ–π–∫–∏: {'‚úÖ –î–ê' if result.get('suitable_for_development') else '‚ùå –ù–ï–¢'}")

    print(f"\nüìù –û–ø–∏—Å–∞–Ω–∏–µ:")
    print(f"   {result.get('description', 'N/A')[:300]}...")

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
    result_data = {
        'plot_details': plot_details,
        'analysis': result
    }

    with open("output/demo/occupied_plot_result.json", "w", encoding='utf-8') as f:
        json.dump(result_data, f, ensure_ascii=False, indent=2)

    print(f"\n‚úì –†–µ–∑—É–ª—å—Ç–∞—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω: output/demo/occupied_plot_result.json")

    return result


def main():
    """–ó–∞–ø—É—Å–∫ –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏"""

    logger.add("output/demo/demo.log", rotation="10 MB", level="INFO")

    print("\n" + "="*70)
    print("  –î–ï–ú–û–ù–°–¢–†–ê–¶–ò–Ø URBAN PLOT ANALYSIS")
    print("  AI-–∞–Ω–∞–ª–∏–∑ –∑–∞—Å—Ç—Ä–æ–π–∫–∏ –∑–µ–º–µ–ª—å–Ω—ã—Ö —É—á–∞—Å—Ç–∫–æ–≤")
    print("="*70)

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ API –∫–ª—é—á–∞
    try:
        config.validate()
        print(f"\n‚úì API –∫–ª—é—á Claude: —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
    except ValueError as e:
        print(f"\n‚úó –û—à–∏–±–∫–∞: {e}")
        print("\n–°–æ–∑–¥–∞–π—Ç–µ —Ñ–∞–π–ª .env –∏ –¥–æ–±–∞–≤—å—Ç–µ ANTHROPIC_API_KEY")
        return

    print("\n–≠—Ç–æ –¥–µ–º–æ —Ä–∞–±–æ—Ç–∞–µ—Ç –ë–ï–ó –¥–æ—Å—Ç—É–ø–∞ –∫ Rosreestr –∏ Yandex Maps API.")
    print("–ò—Å–ø–æ–ª—å–∑—É—é—Ç—Å—è —Å–∏–Ω—Ç–µ—Ç–∏—á–µ—Å–∫–∏–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –¥–ª—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–µ–π.")

    # –ó–∞–ø—É—Å–∫–∞–µ–º –¥–µ–º–æ
    print("\n" + "="*70)

    # –î–µ–º–æ 1: –°–≤–æ–±–æ–¥–Ω—ã–π —É—á–∞—Å—Ç–æ–∫
    result1 = demo_analyze_vacant_plot()

    input("\n\n–ù–∞–∂–º–∏—Ç–µ Enter –¥–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è...")

    # –î–µ–º–æ 2: –ó–∞—Å—Ç—Ä–æ–µ–Ω–Ω—ã–π —É—á–∞—Å—Ç–æ–∫
    result2 = demo_analyze_occupied_plot()

    # –ò—Ç–æ–≥–∏
    print("\n" + "="*70)
    print("–î–ï–ú–û–ù–°–¢–†–ê–¶–ò–Ø –ó–ê–í–ï–†–®–ï–ù–ê")
    print("="*70)

    print("\n–†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏: output/demo/")
    print("- vacant_plot.png - –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Å–≤–æ–±–æ–¥–Ω–æ–≥–æ —É—á–∞—Å—Ç–∫–∞")
    print("- vacant_plot_result.json - –†–µ–∑—É–ª—å—Ç–∞—Ç –∞–Ω–∞–ª–∏–∑–∞ —Å–≤–æ–±–æ–¥–Ω–æ–≥–æ —É—á–∞—Å—Ç–∫–∞")
    print("- occupied_plot.png - –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∑–∞—Å—Ç—Ä–æ–µ–Ω–Ω–æ–≥–æ —É—á–∞—Å—Ç–∫–∞")
    print("- occupied_plot_result.json - –†–µ–∑—É–ª—å—Ç–∞—Ç –∞–Ω–∞–ª–∏–∑–∞ –∑–∞—Å—Ç—Ä–æ–µ–Ω–Ω–æ–≥–æ —É—á–∞—Å—Ç–∫–∞")

    print("\n" + "="*70)
    print("–ö–ê–ö –†–ê–ë–û–¢–ê–ï–¢ –°–ò–°–¢–ï–ú–ê:")
    print("="*70)
    print("""
1. –°–ø—É—Ç–Ω–∏–∫–æ–≤—ã–π —Å–Ω–∏–º–æ–∫ —É—á–∞—Å—Ç–∫–∞ ‚Üí Claude Vision API
2. AI –∞–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∏ –æ–ø—Ä–µ–¥–µ–ª—è–µ—Ç:
   - –ù–∞–ª–∏—á–∏–µ –∑–¥–∞–Ω–∏–π –∏ –ø–æ—Å—Ç—Ä–æ–µ–∫
   - –£—Ä–æ–≤–µ–Ω—å —Ä–∞—Å—Ç–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
   - –ü—Ä–∏–≥–æ–¥–Ω–æ—Å—Ç—å –¥–ª—è —Å—Ç—Ä–æ–∏—Ç–µ–ª—å—Å—Ç–≤–∞
3. –†–µ–∑—É–ª—å—Ç–∞—Ç: –∑–∞—Å—Ç—Ä–æ–µ–Ω/—Å–≤–æ–±–æ–¥–µ–Ω + —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å + —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏

–í production –≤–µ—Ä—Å–∏–∏:
- –†–µ–∞–ª—å–Ω—ã–µ —Å–ø—É—Ç–Ω–∏–∫–æ–≤—ã–µ —Å–Ω–∏–º–∫–∏ –∏–∑ Yandex/Google Maps
- –ö–∞–¥–∞—Å—Ç—Ä–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ –∏–∑ –†–æ—Å—Ä–µ–µ—Å—Ç—Ä–∞
- –î–∞–Ω–Ω—ã–µ –æ –∑–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–∏ –∏–∑ –≥–µ–Ω–ø–ª–∞–Ω–∞ –°–ü–±
- –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏—è –ø–æ –∫—Ä–∏—Ç–µ—Ä–∏—è–º
    """)

    print("\n‚úì –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–æ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!")


if __name__ == "__main__":
    main()
